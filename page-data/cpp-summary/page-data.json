{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp-summary/","result":{"data":{"site":{"siteMetadata":{"author":"weijiew","homeCity":"China"}},"markdownRemark":{"html":"<h2>1.0基础知识</h2>\n<p><strong>1.1：</strong></p>\n<p>编写c++程序一般经过<strong>编辑，编译，连接，运行</strong>四步。\n编辑：将<strong>c++源程序输入</strong>计算机的过程，文件名为<strong>cpp</strong>。\n编译：将cpp文件<strong>翻译成机器语言</strong>，文件名为<strong>obj</strong>。\n连接：<strong>分配内存地址</strong>后，转换成可执行程序，文件名为<strong>exe</strong>。\n运行：<strong>执行exe文件</strong>，将结果显示到屏幕上。\n<strong>1.2：</strong></p>\n<p>函数的返回值类型在定义之时就以决定。</p>\n<p><strong>1.3：</strong></p>\n<p>基类的公有成员采用私有继承时，在派生类中会变成私有成员。</p>\n<p><strong>1.4：</strong></p>\n<p>数据封装：将数据与操作封装到一起形成实体，这个实体也就是类。\n类也就是数据与操作的组合体，数据是类的静态特征，操作是类的动态特征。</p>\n<p><strong>1.5：</strong></p>\n<p>派生类是基类的扩展和延伸，派生类一个来自本体，一个来自基类。</p>\n<p><strong>1.6：</strong></p>\n<p>this指针可以保证每个对象都拥有自己的数据成员，可以共享处理这些数据的代码。</p>\n<p><strong>1.7：</strong></p>\n<p>多态分为静态多态和动态多态，静态多态是由于参数的不同调用同名函数，动态多态是由于对象的不同调用同名函数。多态的对象都是同名函数。</p>\n<p><strong>1.8：</strong></p>\n<p>内联函数代码量少，执行效率高，可以被频繁调用。也就是inline。</p>\n<p><strong>1.9：</strong></p>\n<p>派生类的调用顺序是先调用基类构造函数，调用子对象，在调用派生类。析构函数反之。</p>\n<p><strong>1.10</strong></p>\n<p>后置i++先赋值再自增，前置反之。</p>\n<p><strong>1.11</strong></p>\n<p>自身类对象不能作为类的成员，循环定义。</p>\n<p><strong>1.12</strong></p>\n<p>输出流的四种流 cin/cout/cerr/clog</p>\n<p><strong>1.13</strong></p>\n<p>类是对象的抽象，对象是类的实例。\n引用声明要初始化，指向存在的对象，初始化后就不能指向其他对象。</p>\n<p><strong>带默认形参值的函数</strong></p>\n<p>由默认值的形参必须在右边。\n又默认值的形参右不能出现无默认值的形参。\n因为在函数调用时是按从左至右的顺序建立对应关系的。\n不能重复定义</p>\n<h2>2.0函数例题</h2>\n<p><strong>八位二进制转十进制(教材习题3_2.cpp)</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\ndouble power(double x,int n)\n{\n\tdouble val=1.0,i;\n\tfor(i=0;i&lt;n;i++)\n\t\tval*=x;\n\treturn val;\n}\nint main() \n{\n\tint value=0;\n\tcout&lt;&lt;&quot;Enter an 8 bit binary number:&quot;;\n\tfor(int i=7;i&gt;=0;i--)\n\t{\n\t\tchar ch;\n\t\tcin&gt;&gt;ch;\n\t\tif(ch==&#39;1&#39;)\n\t\t\tvalue+=static_cast&lt;int&gt;(power(2,i));//强制转换，把power（2，i）的结果由double型转换成int型。\n\t}\n\tcout&lt;&lt;&quot;Decimal value is&quot;&lt;&lt;value&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>编写程序求π值(教材习题3_3.cpp)</strong></p>\n<p>arctanx=x-x<em>x</em>x/3+x<em>x</em>x<em>x</em>x/5-…</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\ndouble arctan(double x)\n{\n\tdouble sqr=x*x;\n\tdouble e=x;\n\tdouble r=0;\n\tint i=1;\n\twhile(e/i&gt;1e-5){\n\t\tdouble f=e/i;\n\t\tr=(i%4==1)?r+f:r-f;//判断i%4的结果是否等于1，若是1则r+f若不是1则r-f；\n\t\te=e*sqr;\n\t\ti+=2;\n\t}\n\treturn r；//注意\n}\nint main() {\n\tdouble a=16.0*arctan(1/5.0);//整数相除结果取整若是1/5结果为0；\n\tdouble b=4.0*arctan(1/239.0);\n\tcout&lt;&lt;&quot;PI=&quot;&lt;&lt;a-b&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>寻找回文数(教材习题3_4.cpp)</strong></p>\n<p>思路：除10取余，取出每一位的数字。数字反置，低位充当高位，按反序构成新的数，与原数比较。</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nbool symm(unsigned n)//判断是否为回文数\n{\n\tunsigned i=n;\n\tunsigned m=0;\n\t**while(i&gt;0)\n\t{\n\t\tm=m*10+i%10;\n\t\ti/=10;\n\t}**\n\treturn m==n;//函数为bool类型，所以返回值类型也是bool类型，如果m==n为返回true，反之为false。\n\t}\nint main() \n{\n\tfor(unsigned m=11;m&lt;1000;m++)\n\tif(symm(m)&amp;&amp;symm(m*m)&amp;&amp;symm(m*m*m))\n\t{\n\t\tcout&lt;&lt;&quot;m=&quot;&lt;&lt;m;\n\t\tcout&lt;&lt;&quot;m*m=&quot;&lt;&lt;m*m;\n\t\tcout&lt;&lt;&quot;m*m*m=&quot;&lt;&lt;m*m*m&lt;&lt;endl;\n\t}\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p> <strong>教材习题3_5.cpp</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nconst double TINY_VALUE=1e-10;//定义一个常量\ndouble tsin(double x)//实现sin函数\n{\n\tdouble g=0;\n\tdouble t=x;\n\tint n=1;\n\tdo{\n\t\tg+=t;\n\t\tn++;\n\t\tt=-t*x*x/(2*n-1)/(2*n-2);//阶乘的实现\n\t}while(fabs(t)&gt;=TINY_VALUE);\n\treturn g;\n}\nint main() \n{\n\tdouble k,r,s;\n\tcout&lt;&lt;&quot;r=&quot;;\n\tcin&gt;&gt;r;\n\tcout&lt;&lt;&quot;s=&quot;;\n\tcin&gt;&gt;s;\n\tif(r*r&lt;=s*s)\n\t\tk=sqrt(tsin(r)*tsin(r)+tsin(s)*tsin(s));\n\telse\n\t\tk=tsin(r*s)/2;\n\tcout&lt;&lt;k&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>总结：</strong> </p>\n<p>const优点\n1定义一个常量，不可变性。\n2便于检查，消除隐患。\n3总控制\n4节省空间\n5提高效率，编译器不提供内存空间，而是将它保存在符号表中。</p>\n<p> <strong>例3-7</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nint fu2(int m)//fu1 fu2 顺序不能反。\n{\n\treturn m*m;\n}\nint fu1(int x,int y)\n{\n\treturn fu2(x)+fu2(y);\n}\n\nint main()\n{\n\tint a,b;\n\tcin&gt;&gt;a&gt;&gt;b;\n\tcout&lt;&lt;fu1(a,b)&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>例3-8</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nunsigned fac(unsigned n)\n{\n\tunsigned f;\n\t\tif(n==0)\n\t\t\tf=1;\n\t\telse\n\t\t\tf=fac(n-1)*n;//循环再次进入fac 函数\n\t\treturn f;\n}\nint main() \n{\n\tint a;\n\tcin&gt;&gt;a;\n\tcout&lt;&lt;fac(a)&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>例3-9</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nint comm(int n,int k)\n{\n\tif(k&gt;n)\n\t\treturn 0;\n\telse if(n==k||k==0)\n\t\treturn 1;\n\telse \n\t\treturn comm(n-1,k)+comm(n-1,k-1);//分好类\n}\nint main()\n{\n\tint n,k;\n\tcout&lt;&lt;&quot;Please enter two integers n and k:&quot;;\n\tcin&gt;&gt;n&gt;&gt;k;\n\tcout&lt;&lt;&quot;C(n,k)=&quot;&lt;&lt;comm(n,k)&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p><strong>值传递与引用传递</strong></p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">void swap（int a，int b）</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">void swap （int &amp;a，int &amp;b）</code>\n        </deckgo-highlight-code>\n      \n<p>形参写法不同，效果虽同，但差异很大。</p>\n<p>引用声明要初始化，指向存在的对象，初始化后就不能指向其他对象。</p>\n<h2>3.0内联函数</h2>\n<p><strong>3.1</strong>内联函数不是在调用时发生控制转移，而是在编译时将函数体嵌入在每一个调用处。</p>\n<p><strong>3.2</strong>节省参数传递，控制转移开销。inline 只是一个要求，没有inline，在现代编译器中也可能被认为是内联函数。</p>\n<p><strong>4.0带默认形参值的函数</strong></p>\n<p><strong>4.1</strong>由默认值的形参必须在右边。</p>\n<p><strong>4.2</strong>又默认值的形参右不能出现无默认值的形参。</p>\n<p><strong>4.3</strong>因为在函数调用时是按从左至右的顺序建立对应关系的。</p>\n<p><strong>4.4</strong>不能重复定义</p>\n<h2>闰年</h2>\n\n        <deckgo-highlight-code   >\n          <code slot=\"code\">\tif((a%4==0&amp;&amp;a%100!=0)||(a%400==0));</code>\n        </deckgo-highlight-code>\n      \n<h2>switch语句的用法</h2>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">switch(day)\n{\ncase 0:\n\tcout&lt;&lt;&quot; &quot;&lt;&lt;endl;break;\ncase 1：\n\tcout&lt;&lt;&quot; &quot;&lt;&lt;endl;break;\t\n}</code>\n        </deckgo-highlight-code>\n      \n<h2>while do/while for语句的用法</h2>\n<h2>数字反转</h2>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n\tint n,a,b;\n\tcin&gt;&gt;n;\n\tdo\n\t{\n\t\ta=n%10;\n\t\tcout&lt;&lt;a;\n\t\tn/=10;\n\t}while(n!=0);\n\tcout&lt;&lt;sum;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>求数字的因子\n因子：从1到n，凡是可以整除n的数字均为n的因子</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n\tint n,a,b;\n\tcin&gt;&gt;n;\n\tfor(int i=1;i&lt;=n;i++)//遍历n\n\t{\n\t\tif(n%i==0)\n\t\t\tcout&lt;&lt;i&lt;&lt;&quot; &quot;;\n\t}\n\tcout&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>九九乘法表</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n\tfor(int i=1;i&lt;10;i++)\n\t{\n\t\tfor(int j=1;j&lt;=i;j++)\n\t\t{\n\t\t\tcout&lt;&lt;j&lt;&lt;&quot;*&quot;&lt;&lt;i&lt;&lt;&quot;=&quot;&lt;&lt;i*j&lt;&lt;&quot; &quot;;\n\t\t}\n\t\t\tcout&lt;&lt;endl;\n\t}\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>8-1</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\nusing namespace std;\nclass co{\npublic:\n\tco (double r=0.0,double i=0.0)\n\t{\n\t\ta=r;\n\t\tb=i;\n\t}\n\tco operator+(const co &amp;c2) const{\n\treturn co(a+c2.a,b+c2.b);\n};\n\tco operator-(const co &amp;c2) const{\n\treturn co(a-c2.a,b-c2.b);\n};\n\tvoid display() const{\n\tcout&lt;&lt;&quot;(&quot;&lt;&lt;a&lt;&lt;&quot;,&quot;&lt;&lt;b&lt;&lt;&quot;)&quot;&lt;&lt;endl;\n};\nprivate:\n\tdouble a;\n\tdouble b;\n};\n/*co co::operator+(const co &amp;c2) const{\n\treturn co(a+c2.a,b+c2.b);\n}\nco co::operator-(const co &amp;c2) const{\n\treturn co(a-c2.a,b-c2.b);\n}\nvoid co::display() const{\n\tcout&lt;&lt;&quot;(&quot;&lt;&lt;a&lt;&lt;&quot;,&quot;&lt;&lt;b&lt;&lt;&quot;)&quot;&lt;&lt;endl;\n}*/\nint main()\n{\n\tco c1(5,4),c2(2,10),c3;\n\tc1.display();\n\tc2.display();\n\tc3=c1-c2;\n\tc3.display();\n\tc3=c1+c2;\n\tc3.display();\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\nusing namespace std;\nclass co{\npublic:\n\tco (double r=0.0,double i=0.0)\n\t{\n\t\ta=r;\n\t\tb=i;\n\t}\n\tco operator+(const co &amp;c2) const;\n\tco operator-(const co &amp;c2) const;\n\tvoid display() const;\nprivate:\n\tdouble a;\n\tdouble b;\n};\nco co::operator+(const co &amp;c2) const{\n\treturn co(a+c2.a,b+c2.b);\n}\nco co::operator-(const co &amp;c2) const{\n\treturn co(a-c2.a,b-c2.b);\n}\nvoid co::display() const{\n\tcout&lt;&lt;&quot;(&quot;&lt;&lt;a&lt;&lt;&quot;,&quot;&lt;&lt;b&lt;&lt;&quot;)&quot;&lt;&lt;endl;\n}\nint main()\n{\n\tco c1(5,4),c2(2,10),c3;\n\tc1.display();\n\tc2.display();\n\tc3=c1-c2;\n\tc3.display();\n\tc3=c1+c2;\n\tc3.display();\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>8-4</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nclass base1{\npublic:\n\tvirtual void display() const;\n};\nvoid base1::display()const{\n\tcout&lt;&lt;&quot;base::display()&quot;&lt;&lt;endl;\n}\nclass base2:public base1{\npublic:\n\tvoid display()const;\n};\nvoid base2::display()const{\n\tcout&lt;&lt;&quot;base2::display()&quot;&lt;&lt;endl;\n}\nclass derived:public base2{\npublic:\n\tvoid display()const;\n};\nvoid derived::display()const{\n\tcout&lt;&lt;&quot;derived::display()&quot;&lt;&lt;endl;\n} \nvoid fun(base1*ptr)\n{\n\tptr-&gt;display();\n}\nint main()\n{\n\tbase1 base1;\n\tbase2 base2;\n\tderived derived;\n\tfun(&amp;base1);\n\tfun(&amp;base2);\n\tfun(&amp;derived);\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>9-1函数模板</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\ntemplate&lt;class t&gt;\nvoid qq(t *a,int i)\n{\n\tfor(int j=0;j&lt;i;j++)\n\t\tcout&lt;&lt;a[j]&lt;&lt;&quot; &quot;;\n\tcout&lt;&lt;endl;\n}\nint main()\n{\n\tint a[5]={0,1,2,3,4};\n\tdouble b[5]={0.5,0.1,0.2,0.3,0.4};\n\tqq(a,5);\n\tqq(b,5);\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\ntemplate&lt;class t&gt;\nt abs(t x)\n{\n\treturn x&lt;0?-x,:x;\n}\nint main()\n{\n\tint i;\n\tcin&gt;&gt;i;\n\tcout&lt;&lt;abs(i)&lt;&lt;endl;\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>8-5</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nclass base\n{\npublic:\n\tvirtual~base();\n};\nbase::~base()\n{\n\tcout&lt;&lt;&quot;base destructor&quot;&lt;&lt;endl;\n}\nclass derived:public base\n{\npublic:\n\tderived();\n\t~derived();\nprivate:\n\tint *p;\n};\nderived::derived(){\n\tp=new int(0);\n}\nderievd::~derievd(){\n\t\t\tcout&lt;&lt;&quot;derievd destructor&quot;&lt;&lt;endl;\n\t\t\tdelete p;\n}\n\t\tvoid fun(base*b)\n\t\t{\n\t\t\tdelete b;\n\t\t}\n\t\tint main()\n\t\t{\n\t\t\tbase*b=new derived();\n\t\t\tfun(b);\n\t\t\treturn 0;\n\t\t}</code>\n        </deckgo-highlight-code>\n      \n<h2>7-5</h2>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include&lt;iostream&gt;\nusing namespace std;\nclass base1\n{\npublic:\n\tbase1(int i){}\n\t~base1(){}\n};\nclass base2\n{\npublic:\n\tbase2(int j){}\n\t~base2(){}\n};\nclass base3\n{\npublic:\n\tbase3(){}\n\t~base3(){}\n};\nclass derived:public base2,public base1,public base3{\npublic:\n\tderived(int a,int b,int c,int d):base1(a),member2(d),member1(c),base2(b){}\nprivate:\n\tbase1 member1;\n\tbase2 member2;\n\tbase3 member3;\n};\nint main()\n{\n\tderived obj(1,2,3,4);\n\treturn 0;\n}</code>\n        </deckgo-highlight-code>\n      \n<p>摸球问题</p>\n\n        <deckgo-highlight-code language=\"cpp\"  >\n          <code slot=\"code\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint i,j,k;\nint sum;\nsum=0;\nfor(i=1;i&lt;5;i++)\nfor(j=1;j&lt;5;j++)\nfor(k=1;k&lt;5;k++)\n{\nif(i!=j &amp;&amp; j!=k &amp;&amp;i!=k)\n{sum=sum+1;}\n}\ncout&lt;&lt;sum;\n}</code>\n        </deckgo-highlight-code>\n      ","excerpt":"1.0基础知识 1.1： 编写c++程序一般经过编辑，编译，连接，运行四步。\n编辑：将c++源程序输入计算机的过程，文件名为cpp。\n编译：将cpp文件翻译成机器语言，文件名为obj。\n连接：分配内存地址后，转换成可执行程序，文件名为exe。\n运行：执行exe…","fields":{"tagSlugs":["/tags/cpp/"]},"frontmatter":{"title":"CPP 期末总结","tags":["CPP"],"date":"December 18, 2018"}}},"pageContext":{"slug":"/cpp-summary/"}}}